# IMPORTANT:
#
# CLion will generate cmake-build-debug and cmake-build-release dirs,
# but the one to use is just `build`, generated by idf.

cmake_minimum_required(VERSION 3.5)

set(ENV{IDF_PATH} $ENV{HOME}/sdk/esp-idf)

set(CMAKE_CXX_STANDARD 17)

# The path to the Python venv is printed when activating ESP-IDF.
set(ENV{IDF_PYTHON_ENV_PATH} $ENV{HOME}/.espressif/python_env/idf4.3_py3.9_env/bin/python)

include($ENV{IDF_PATH}/tools/cmake/project.cmake)
project(door-opener-remote)

# Colors in build output
idf_build_set_property(COMPILE_OPTIONS "-fdiagnostics-color=always" APPEND)

set(
    CMAKE_CXX_FLAGS
    "${CMAKE_CXX_FLAGS} -Wno-unused-function"
)

# From https://github.com/espressif/esp-idf/blob/master/tools/cmake/toolchain-esp32.cmake To that, I've added
# -Wfatal-errors, which causes the compiler to stop after the first error. It does not cause warnings to become errors
# by itelf.
# It's important to add to instead of overwriting the existing flags. set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS}
# -Wfatal-errors") set(CMAKE_C_STANDARD 99) set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wfatal-errors")

set(NINJA -j6)

#    "-mlongcalls -Wno-frame-address "
#    CACHE STRING
#    "C++ Compiler Base Flags"


#include_directories(
#    components/m5stickc-idf
#    components/m5stickc-idf/include
#)

#load_cache(CMAKE_CXX_COMPILER ~/sdk/esp32/xtensa-esp32-elf/bin/xtensa-esp32-elf-cpp)
#load_cache(CMAKE_CXX_COMPILER ~/sdk/esp32/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++)

#include($ENV{IDF_PATH}/tools/cmake/project.cmake)

#set(IDF_PATH ~/sdk/esp32/esp-idf)
#set(PATH ~/sdk/esp32/xtensa-esp32-elf/bin)
#load_cache(CMAKE_C_COMPILER /home/dahl/sdk/esp32/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc)
#load_cache(CMAKE_CXX_COMPILER /home/dahl/sdk/esp32/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++)
#set(CMAKE_C_COMPILER xtensa-esp32-elf-gcc)
#
#load_cache(CMAKE_C_COMPILER xtensa-esp32-elf-g++)
#load_cache(CMAKE_C_COMPILER ~/sdk/esp32/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++)
#
#set(EXTRA_COMPONENT_DIRS $ENV{IDF_PATH}/examples/common_components/protocol_examples_common)
#
#include(${IDF_PATH}/tools/cmake/project.cmake)
#
#set(LINK_LIBS "audio wifi http")
#target_link_libraries(noise ${LINK_LIBS} ${LINK_LIBS})
#link_libraries(noise ${LINK_LIBS} ${LINK_LIBS})

#project(door-remote)
